{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import from used modules\n",
    "\n",
    "import inputs_model as im\n",
    "\n",
    "from pyomo.environ import *\n",
    "import pandas as pd\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Criação do Modelo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model\n",
    "model = ConcreteModel()\n",
    "\n",
    "# Sets:                            \n",
    "model.Nodes = RangeSet( 0, (im.total_nodes - 1) ) # Node Set\n",
    "model.Functions = RangeSet( 0, (im.total_functions - 1) ) # Function Set\n",
    "model.Demands = RangeSet( 0, (im.total_demands - 1)) # Demand Set\n",
    "\n",
    "\n",
    "# Variables:\n",
    "\n",
    "# Mapping the virtual flow to the physical flow - of each demand\n",
    "\n",
    "model.w = Var(  model.Nodes, \n",
    "                model.Nodes, \n",
    "                model.Functions, \n",
    "                model.Functions, \n",
    "                model.Demands, \n",
    "                within = Binary, \n",
    "                initialize = 0)\n",
    "\n",
    "# Mapping if demand 'd' used function 'k' on server 'i'\n",
    "model.u = Var(  model.Nodes, \n",
    "                model.Functions, \n",
    "                model.Demands, \n",
    "                within = Binary, \n",
    "                initialize = 0)\n",
    "\n",
    "# Mapping if function 'k' are allocated on server 'i'\n",
    "model.x = Var(  model.Nodes, \n",
    "                model.Functions, \n",
    "                within = Binary, \n",
    "                initialize = 0)\n",
    "\n",
    "# Mapping physical links that were used\n",
    "model.y = Var(  model.Nodes,\n",
    "                model.Nodes, \n",
    "                within = Binary,  \n",
    "                initialize = 0)\n",
    "\n",
    "# Mapping of the total demands that used each physical link.\n",
    "model.number_flows = Var(   model.Nodes,    \n",
    "                            model.Nodes,\n",
    "                            within = NonNegativeIntegers, \n",
    "                            initialize = 0)\n",
    "\n",
    "# Fitness Function\n",
    "def obj_function(model):\n",
    "    \"\"\"\n",
    "    Calcula o valor da função objetivo do modelo de otimização.\n",
    "\n",
    "    Args:\n",
    "        model: O modelo de otimização que contém as variáveis de decisão.\n",
    "\n",
    "    Returns:\n",
    "        float: O valor da função objetivo calculado pelo modelo de otimização.\n",
    "    \"\"\"\n",
    "    \n",
    "    total_flow = sum(   model.number_flows[i, j] \n",
    "                        for i in model.Nodes \n",
    "                        for j in model.Nodes \n",
    "                        )\n",
    "    \n",
    "    placement = sum(    model.x[i,k] \n",
    "                        for i in model.Nodes        \n",
    "                        for k in model.Functions\n",
    "                    )\n",
    "\n",
    "    return total_flow + placement\n",
    "                         \n",
    "# Objective Function\n",
    "model.objective = Objective(    rule = obj_function, \n",
    "                                sense = minimize \n",
    "                            ) "
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Restrições\n",
    "\n",
    "\n",
    "<!-- \n",
    "\n",
    "def flow_used(model, d, i, l):\n",
    "    '''\n",
    "    A demanda d só pode utilizar a função l, alocada no servidor i,\n",
    "    se ela passar pelo servidor i no seu fluxo físico.    \n",
    "    '''\n",
    "\n",
    "    source = im.demands[d]['source']\n",
    "    virtual_topology = im.demands[d]['service']['sfc'] \n",
    "\n",
    "    # i não é o meu nó de origem\n",
    "    if (source != i): \n",
    "\n",
    "        # A demanda d só pode usar a função l no nó i se ... \n",
    "        permission_used = model.u[i,l,d] <= \\\n",
    "                            sum(  model.w[j,i,k,l,d] # ... se a demanda d saiu do nó j (onde estava usando a função k) para o nó i (onde vai usar a função l)\n",
    "                                for j in model.Nodes \n",
    "                                for k in model.Functions \n",
    "                                if (im.physical_topology[j][i] == 1) & (virtual_topology[k][l] == 1)\n",
    "                                )\n",
    "    \n",
    "    else:\n",
    "        permission_used = Constraint.Skip\n",
    "\n",
    "    return permission_used\n",
    "\n",
    "model.C9 = Constraint(  model.Demands, \n",
    "                        model.Nodes, \n",
    "                        model.Functions, \n",
    "                        rule = flow_used)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "-->"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def set_source(model, d):\n",
    "    '''\n",
    "    A primeira função (k) que a demanda (d) utiliza está alocada no servidor (i) de origem.\n",
    "    '''\n",
    "    \n",
    "    # Origem da demanda\n",
    "    origem_node = im.demands[d]['source'] \n",
    "    # A demanda d usou a função source (0) no nó de origem\n",
    "    set_source = model.u[   origem_node, \n",
    "                            0, \n",
    "                            d] == 1 \n",
    "    \n",
    "    return set_source\n",
    "\n",
    "model.C1 = Constraint(  model.Demands, \n",
    "                        rule = set_source)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def set_destiny(model, d):\n",
    "    '''\n",
    "    A última função (k) que a demanda (d) utiliza está alocada no servidor (i) de destino.\n",
    "    '''\n",
    "    \n",
    "    # Destino da demanda\n",
    "    destini_node = im.demands[d]['destiny'] \n",
    "    # A demanda d usou a função destiny (7) no nó de destino\n",
    "    set_destination = model.u[  destini_node,\n",
    "                                7,\n",
    "                                d] == 1\n",
    "\n",
    "    \n",
    "    return set_destination\n",
    "\n",
    "model.C2 = Constraint(  model.Demands, \n",
    "                        rule = set_destiny)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def set_used(model, d, k):\n",
    "    '''\n",
    "    A demanda d precisa utilizar todas as funções que exitem na sua cadeia.\n",
    "    A variável u vai ser igual a 1 se a demanda d estiver usando a função k no servidor i.\n",
    "    A demanda obrigatóriamente precisa usar todas suas funções.\n",
    "    '''\n",
    "    \n",
    "    functions_used = im.demands[d]['service']['functions'][k]\n",
    "\n",
    "    if functions_used == 1:\n",
    "        # Se k é uma função que d precisa usar\n",
    "        used = sum( model.u[i, k, d] # a demanda d pracisa usar a funcao k em algum nó i (seja ele qual for)\n",
    "                    for i in model.Nodes) == 1\n",
    "    else:\n",
    "        used = Constraint.Skip\n",
    "\n",
    "    return used\n",
    "\n",
    "model.C3 = Constraint(  model.Demands, \n",
    "                        model.Functions, \n",
    "                        rule = set_used)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def function_allocation(model, d, i, k):\n",
    "    '''\n",
    "    A demanda d só consegue utilizar a função k no nó i se ...\n",
    "    Se a função k estiver alocada no nó i\n",
    "    '''\n",
    "    \n",
    "\n",
    "    return model.u[i, k, d] <= model.x[i, k]\n",
    "    \n",
    "model.C4 = Constraint(  model.Demands, \n",
    "                        model.Nodes, \n",
    "                        model.Functions, \n",
    "                        rule = function_allocation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def flow_conservation(model, d, i, k, l):\n",
    "    '''\n",
    "    Conservação de Fluxo - Se existe um fluxo virtual, esse fluxo precisa ser mapeado para o fluxo fisico.\n",
    "    Para toda demanda d que está no servidor i usando a função k - precisa ser direcionado para\n",
    "    servidor j que vá usar a função l. k,l é o fluxo virtual que representa que ao sair da função k a demanda d\n",
    "    precisa usar a função l. \n",
    "    '''\n",
    "\n",
    "\n",
    "    virtual_topology = im.demands[d]['service']['sfc'][k][l]\n",
    "\n",
    "    if (virtual_topology == 1):\n",
    "\n",
    "        main_conservation = sum(    model.w[i,j,k,l,d] # A demanda d que está no nó i utilizando a função k - vai para o nó j utilizar a função l\n",
    "                                    # (saindo do i)\n",
    "                                    for j in model.Nodes \n",
    "                                    if ( im.physical_topology[i][j] == 1) ) - \\\n",
    "                                    \\\n",
    "                            sum(    model.w[j,i,k,l,d] # A demanda d que estava no nó j utilizando a função k - foi para o nó i utilizar a função l\n",
    "                                    # (Entrando no I)\n",
    "                                    for j in model.Nodes \n",
    "                                    if ( im.physical_topology[j][i] == 1) ) \\\n",
    "                            == model.u[i,k,d] - model.u[i,l,d] # A demanda d usou a função k no nó i  -  A demanda d usou a função l no nó i\n",
    "    else:\n",
    "        main_conservation = Constraint.Skip\n",
    "\n",
    "        \n",
    "    return main_conservation\n",
    "\n",
    "model.C5 = Constraint(  model.Demands, \n",
    "                        model.Nodes, \n",
    "                        model.Functions, \n",
    "                        model.Functions, \n",
    "                        rule = flow_conservation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def loop_in(model, j, d):\n",
    "    '''\n",
    "    Para evitar que uma demanda d fique em loop de entrada em um servidor i.\n",
    "    Ou seja, para todos fluxos virtuais (k,l) da demanda d --> A demanda só pode \n",
    "    entrar no servido i uma única vez.\n",
    "    '''\n",
    "\n",
    "    virtual_topology = im.demands[d]['service']['sfc']\n",
    "\n",
    "    avoid_loops_in = \\\n",
    "        sum(    model.w[i,j,k,l,d] # a demanda d está entrando no nó j (onde vai usar a funcao l) vindo do nó i (onde estava usando a funcao k) \n",
    "                for i in model.Nodes \n",
    "                for k in model.Functions \n",
    "                for l in model.Functions \n",
    "                if (im.physical_topology[i][j] == 1) & (virtual_topology[k][l] == 1)) <= 1\n",
    "\n",
    "    return avoid_loops_in\n",
    "\n",
    "model.C6 = Constraint(  model.Nodes, \n",
    "                        model.Demands, \n",
    "                        rule = loop_in)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def loop_out(model, i, d):\n",
    "    '''\n",
    "    Para evitar que uma demanda d fique em loop de saída de um servidor i.\n",
    "    Ou seja, para todos fluxos virtuais (k,l) da demanda d --> A demanda só \n",
    "    pode sair do servido i uma única vez.\n",
    "    '''\n",
    "\n",
    "    virtual_topology = im.demands[d]['service']['sfc']\n",
    "\n",
    "    avoid_loops_out = \\\n",
    "        sum(    model.w[i,j,k,l,d] # a demanda d está saindo do nó i (onde estava usando a funcao k) para o nó j (usar a funcao l)\n",
    "                for j in model.Nodes \n",
    "                for k in model.Functions \n",
    "                for l in model.Functions \n",
    "                if (im.physical_topology[i][j] == 1) & (virtual_topology[k][l] == 1)) <= 1\n",
    "\n",
    "    return avoid_loops_out \n",
    "\n",
    "model.C7 = Constraint(  model.Nodes, \n",
    "                        model.Demands, \n",
    "                        rule = loop_out)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def total_flow(model, i, j):\n",
    "    '''\n",
    "    number_flows é uma variável de controle que apresenta o número de demandas que estão utilizando o link físico i,j\n",
    "    '''\n",
    "    \n",
    "    flow = model.number_flows[i,j] == sum(  model.w[i,j,k,l,d] \n",
    "                                            for k in model.Functions \n",
    "                                            for l in model.Functions \n",
    "                                            for d in model.Demands\n",
    "                                            )\n",
    "                \n",
    "    return flow\n",
    "\n",
    "model.C8 = Constraint(  model.Nodes, \n",
    "                        model.Nodes, \n",
    "                        rule = total_flow)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Solução"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Rodando o solver\n",
    "solver = SolverFactory('cplex')\n",
    "results = solver.solve( model, )"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Outputs - Exibição"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cria uma lista com os rotulos dos nodes\n",
    "nodes = []\n",
    "for i in model.Nodes:\n",
    "    nodes.append(f'Node {i}')\n",
    "\n",
    "# Cria uma lista com os rotulos das demandas\n",
    "    demands = []\n",
    "for d in model.Demands:\n",
    "    demands.append(f'Demanda {d}')\n",
    "\n",
    "funcoes = ['Source', 'NAT', 'FW', 'TM', 'WOC', 'VOC', 'IDS', 'Destiny']\n",
    "\n",
    "# DataFrame de Nodes x Funções\n",
    "df_placement = pd.DataFrame(columns=funcoes, index=nodes)\n",
    "\n",
    "index = pd.MultiIndex.from_product([demands, nodes], names=['Demanda', 'Servidor'])\n",
    "# Dataframe de Demanda-Nodes X Funções\n",
    "df_used = pd.DataFrame(columns=funcoes, index=index)\n",
    "# Dataframe de Demanda-Nodes X Nodes\n",
    "df_percurso = pd.DataFrame(columns=nodes, index=index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " A função objetivo é : 26.0  --> Fluxo (12.0) + Alocação (6.0)\n"
     ]
    }
   ],
   "source": [
    "tf = sum(value(model.number_flows[:, :]))\n",
    "p = sum(value(model.x[:, :])) - sum(value(model.x[:, 0])) - sum(value(model.x[:, 7])) \n",
    "obj = value(model.objective)\n",
    "\n",
    "\n",
    "txt = f' A função objetivo é : {obj}  --> Fluxo ({tf}) + Alocação ({p})' \n",
    "print(txt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Funções x Servidores - Onde a função k está sendo alocada? (Variável : X)\n",
      "============================================================\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Source</th>\n",
       "      <th>NAT</th>\n",
       "      <th>FW</th>\n",
       "      <th>TM</th>\n",
       "      <th>WOC</th>\n",
       "      <th>VOC</th>\n",
       "      <th>IDS</th>\n",
       "      <th>Destiny</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Node 0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Source  NAT   FW   TM  WOC  VOC  IDS Destiny\n",
       "Node 0    1.0  1.0  1.0  1.0  1.0  1.0  1.0     1.0\n",
       "Node 1    1.0    .    .    .    .    .    .     1.0\n",
       "Node 2    1.0    .    .    .    .    .    .     1.0\n",
       "Node 3    1.0    .    .    .    .    .    .     1.0"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(f\"Funções x Servidores - Onde a função k está sendo alocada? (Variável : X)\")\n",
    "print(f\"=\" * 60)\n",
    "\n",
    "for i in model.Nodes:\n",
    "    n = f'Node {i}'\n",
    "    for k in model.Functions:\n",
    "        if value(model.x[i,k]) == 1:\n",
    "            df_placement.loc[n, funcoes[k]] = value(model.x[i,k])\n",
    "        else:\n",
    "            df_placement.loc[n, funcoes[k]] = '.'\n",
    "\n",
    "df_placement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Onde a demanda d está usando a função k?  (Variável : U)\n",
      "=============================================\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Source</th>\n",
       "      <th>NAT</th>\n",
       "      <th>FW</th>\n",
       "      <th>TM</th>\n",
       "      <th>WOC</th>\n",
       "      <th>VOC</th>\n",
       "      <th>IDS</th>\n",
       "      <th>Destiny</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Demanda</th>\n",
       "      <th>Servidor</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Demanda 0</th>\n",
       "      <th>Node 0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 1</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 2</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 3</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Demanda 1</th>\n",
       "      <th>Node 0</th>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 2</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 3</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Demanda 2</th>\n",
       "      <th>Node 0</th>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 1</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 3</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Demanda 3</th>\n",
       "      <th>Node 0</th>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 1</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 2</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Demanda 4</th>\n",
       "      <th>Node 0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 1</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 2</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 3</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Demanda 5</th>\n",
       "      <th>Node 0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 1</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 2</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 3</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Demanda 6</th>\n",
       "      <th>Node 0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 1</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 2</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 3</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Demanda 7</th>\n",
       "      <th>Node 0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 1</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 2</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 3</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Demanda 8</th>\n",
       "      <th>Node 0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 1</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 2</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 3</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Demanda 9</th>\n",
       "      <th>Node 0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 1</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 2</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 3</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Source  NAT   FW   TM  WOC  VOC  IDS Destiny\n",
       "Demanda   Servidor                                             \n",
       "Demanda 0 Node 0      1.0  1.0  1.0  1.0  1.0    .  1.0       .\n",
       "          Node 1        .    .    .    .    .    .    .     1.0\n",
       "          Node 2        .    .    .    .    .    .    .       .\n",
       "          Node 3        .    .    .    .    .    .    .       .\n",
       "Demanda 1 Node 0        .  1.0  1.0  1.0  1.0  1.0  1.0       .\n",
       "          Node 1      1.0    .    .    .    .    .    .       .\n",
       "          Node 2        .    .    .    .    .    .    .     1.0\n",
       "          Node 3        .    .    .    .    .    .    .       .\n",
       "Demanda 2 Node 0        .  1.0  1.0    .  1.0  1.0  1.0       .\n",
       "          Node 1        .    .    .    .    .    .    .       .\n",
       "          Node 2      1.0    .    .    .    .    .    .       .\n",
       "          Node 3        .    .    .    .    .    .    .     1.0\n",
       "Demanda 3 Node 0        .  1.0  1.0  1.0    .    .    .     1.0\n",
       "          Node 1        .    .    .    .    .    .    .       .\n",
       "          Node 2        .    .    .    .    .    .    .       .\n",
       "          Node 3      1.0    .    .    .    .    .    .       .\n",
       "Demanda 4 Node 0      1.0  1.0  1.0  1.0  1.0    .  1.0       .\n",
       "          Node 1        .    .    .    .    .    .    .     1.0\n",
       "          Node 2        .    .    .    .    .    .    .       .\n",
       "          Node 3        .    .    .    .    .    .    .       .\n",
       "Demanda 5 Node 0      1.0  1.0  1.0    .  1.0  1.0  1.0       .\n",
       "          Node 1        .    .    .    .    .    .    .     1.0\n",
       "          Node 2        .    .    .    .    .    .    .       .\n",
       "          Node 3        .    .    .    .    .    .    .       .\n",
       "Demanda 6 Node 0      1.0  1.0  1.0  1.0  1.0    .  1.0       .\n",
       "          Node 1        .    .    .    .    .    .    .     1.0\n",
       "          Node 2        .    .    .    .    .    .    .       .\n",
       "          Node 3        .    .    .    .    .    .    .       .\n",
       "Demanda 7 Node 0      1.0  1.0  1.0  1.0  1.0  1.0  1.0       .\n",
       "          Node 1        .    .    .    .    .    .    .     1.0\n",
       "          Node 2        .    .    .    .    .    .    .       .\n",
       "          Node 3        .    .    .    .    .    .    .       .\n",
       "Demanda 8 Node 0      1.0  1.0  1.0  1.0  1.0    .  1.0       .\n",
       "          Node 1        .    .    .    .    .    .    .     1.0\n",
       "          Node 2        .    .    .    .    .    .    .       .\n",
       "          Node 3        .    .    .    .    .    .    .       .\n",
       "Demanda 9 Node 0      1.0  1.0  1.0  1.0  1.0  1.0  1.0       .\n",
       "          Node 1        .    .    .    .    .    .    .     1.0\n",
       "          Node 2        .    .    .    .    .    .    .       .\n",
       "          Node 3        .    .    .    .    .    .    .       ."
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(f\"Onde a demanda d está usando a função k?  (Variável : U)\")\n",
    "print(f\"=\" * 45)\n",
    "\n",
    "\n",
    "for d in model.Demands:\n",
    "    a = f'Demanda {d}'\n",
    "    for i in model.Nodes:\n",
    "        n = f'Node {i}'\n",
    "        for k in model.Functions:\n",
    "            if value(model.u[i,k,d]) == 1:\n",
    "                df_used.loc[(a, n), funcoes[k]] = value(model.u[i,k,d])\n",
    "            else:\n",
    "                df_used.loc[(a, n), funcoes[k]] = '.'\n",
    "\n",
    "df_used"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Qual o fluxo da demanda d?  (Variável : W)\n",
      "==============================\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Node 0</th>\n",
       "      <th>Node 1</th>\n",
       "      <th>Node 2</th>\n",
       "      <th>Node 3</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Demanda</th>\n",
       "      <th>Servidor</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Demanda 0</th>\n",
       "      <th>Node 0</th>\n",
       "      <td>O</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 1</th>\n",
       "      <td>.</td>\n",
       "      <td>D</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 2</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 3</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Demanda 1</th>\n",
       "      <th>Node 0</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>O</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 2</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>D</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 3</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Demanda 2</th>\n",
       "      <th>Node 0</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 1</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>O</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 3</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Demanda 3</th>\n",
       "      <th>Node 0</th>\n",
       "      <td>D</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 1</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 2</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>O</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Demanda 4</th>\n",
       "      <th>Node 0</th>\n",
       "      <td>O</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 1</th>\n",
       "      <td>.</td>\n",
       "      <td>D</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 2</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 3</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Demanda 5</th>\n",
       "      <th>Node 0</th>\n",
       "      <td>O</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 1</th>\n",
       "      <td>.</td>\n",
       "      <td>D</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 2</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 3</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Demanda 6</th>\n",
       "      <th>Node 0</th>\n",
       "      <td>O</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 1</th>\n",
       "      <td>.</td>\n",
       "      <td>D</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 2</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 3</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Demanda 7</th>\n",
       "      <th>Node 0</th>\n",
       "      <td>O</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 1</th>\n",
       "      <td>.</td>\n",
       "      <td>D</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 2</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 3</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Demanda 8</th>\n",
       "      <th>Node 0</th>\n",
       "      <td>O</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 1</th>\n",
       "      <td>.</td>\n",
       "      <td>D</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 2</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 3</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Demanda 9</th>\n",
       "      <th>Node 0</th>\n",
       "      <td>O</td>\n",
       "      <td>1.0</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 1</th>\n",
       "      <td>.</td>\n",
       "      <td>D</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 2</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Node 3</th>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "      <td>.</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Node 0 Node 1 Node 2 Node 3\n",
       "Demanda   Servidor                            \n",
       "Demanda 0 Node 0        O    1.0      .      .\n",
       "          Node 1        .      D      .      .\n",
       "          Node 2        .      .      .      .\n",
       "          Node 3        .      .      .      .\n",
       "Demanda 1 Node 0        .      .    1.0      .\n",
       "          Node 1      1.0      O      .      .\n",
       "          Node 2        .      .      D      .\n",
       "          Node 3        .      .      .      .\n",
       "Demanda 2 Node 0        .      .      .    1.0\n",
       "          Node 1        .      .      .      .\n",
       "          Node 2      1.0      .      O      .\n",
       "          Node 3        .      .      .      D\n",
       "Demanda 3 Node 0        D      .      .      .\n",
       "          Node 1        .      .      .      .\n",
       "          Node 2        .      .      .      .\n",
       "          Node 3      1.0      .      .      O\n",
       "Demanda 4 Node 0        O    1.0      .      .\n",
       "          Node 1        .      D      .      .\n",
       "          Node 2        .      .      .      .\n",
       "          Node 3        .      .      .      .\n",
       "Demanda 5 Node 0        O    1.0      .      .\n",
       "          Node 1        .      D      .      .\n",
       "          Node 2        .      .      .      .\n",
       "          Node 3        .      .      .      .\n",
       "Demanda 6 Node 0        O    1.0      .      .\n",
       "          Node 1        .      D      .      .\n",
       "          Node 2        .      .      .      .\n",
       "          Node 3        .      .      .      .\n",
       "Demanda 7 Node 0        O    1.0      .      .\n",
       "          Node 1        .      D      .      .\n",
       "          Node 2        .      .      .      .\n",
       "          Node 3        .      .      .      .\n",
       "Demanda 8 Node 0        O    1.0      .      .\n",
       "          Node 1        .      D      .      .\n",
       "          Node 2        .      .      .      .\n",
       "          Node 3        .      .      .      .\n",
       "Demanda 9 Node 0        O    1.0      .      .\n",
       "          Node 1        .      D      .      .\n",
       "          Node 2        .      .      .      .\n",
       "          Node 3        .      .      .      ."
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(f\"Qual o fluxo da demanda d?  (Variável : W)\")\n",
    "print(f\"=\" * 30)\n",
    "\n",
    "# Para cada demanda\n",
    "for d in model.Demands:\n",
    "    a = f'Demanda {d}'\n",
    "    # Para cada nó \n",
    "    for i in model.Nodes:\n",
    "        n1 = f'Node {i}'\n",
    "        # Para cada nó\n",
    "        for j in model.Nodes:\n",
    "            n2 = f'Node {j}'\n",
    "\n",
    "            # A demanda d utilizou o link j,i\n",
    "            total = sum(value(model.w[i,j,:,:,d]))\n",
    "            \n",
    "\n",
    "            # ---------------------------------------------------------------------------\n",
    "            if  total > 0:\n",
    "                \n",
    "                df_percurso.loc[(a, n1), n2] = sum(value(model.w[i,j,:,:,d]))\n",
    "            else:\n",
    "                df_percurso.loc[(a, n1), n2] = '.'\n",
    "\n",
    "            # ---------------------------------------------------------------------------\n",
    "            if (i == im.demands[d]['source']) & (j == im.demands[d]['source']):\n",
    "                if total > 0:\n",
    "                    df_percurso.loc[(a, n1), n2] = 'O1'\n",
    "                else:\n",
    "                    df_percurso.loc[(a, n1), n2] = 'O'\n",
    "\n",
    "            # ---------------------------------------------------------------------------\n",
    "            if (i == im.demands[d]['destiny']) & (j == im.demands[d]['destiny']):\n",
    "                if total > 0:\n",
    "                    df_percurso.loc[(a, n1), n2] = 'D1'\n",
    "                else:\n",
    "                    df_percurso.loc[(a, n1), n2] = 'D'\n",
    "\n",
    "df_percurso"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".nfv-problem",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
